

State is a behavioral design pattern that lets an object alter its behavior when its internal state changes. 
It appears as if the object changed its class



State DSP may look similar to the Strategy pattern, but there’s one key difference. 
In the State pattern, the particular states may be aware of each other and initiate transitions 
from one state to another, whereas strategies almost never know about each other.

Real-World Analogy:

The buttons and switches in your smartphone behave differently depending on the current state of the device:

When the phone is unlocked, pressing buttons leads to executing various functions.
When the phone is locked, pressing any button leads to the unlock screen.
When the phone’s charge is low, pressing any button shows the charging screen.


 Relations with Other Patterns
Bridge, State, Strategy (and to some degree Adapter) have very similar structures. 
Indeed, all of these patterns are based on composition, which is delegating work to other objects. 
However, they all solve different problems. A pattern isn’t just a recipe for structuring your code in a specific way. 
It can also communicate to other developers the problem the pattern solves.

State can be considered as an extension of Strategy. Both patterns are based on composition: 
they change the behavior of the context by delegating some work to helper objects. 
Strategy makes these objects completely independent and unaware of each other. 
However, State doesn’t restrict dependencies between concrete states, letting them alter the state of the context at will.